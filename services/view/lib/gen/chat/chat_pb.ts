// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file chat/chat.proto (package messenjo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message as Message$1, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message messenjo.User
 */
export class User extends Message$1<User> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * @generated from field: string username = 2;
   */
  username = "";

  /**
   * @generated from field: string pfp = 3;
   */
  pfp = "";

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "messenjo.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pfp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message messenjo.GetUserByUsernameReq
 */
export class GetUserByUsernameReq extends Message$1<GetUserByUsernameReq> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  constructor(data?: PartialMessage<GetUserByUsernameReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "messenjo.GetUserByUsernameReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserByUsernameReq {
    return new GetUserByUsernameReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserByUsernameReq {
    return new GetUserByUsernameReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserByUsernameReq {
    return new GetUserByUsernameReq().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserByUsernameReq | PlainMessage<GetUserByUsernameReq> | undefined, b: GetUserByUsernameReq | PlainMessage<GetUserByUsernameReq> | undefined): boolean {
    return proto3.util.equals(GetUserByUsernameReq, a, b);
  }
}

/**
 * @generated from message messenjo.GetContactsRes
 */
export class GetContactsRes extends Message$1<GetContactsRes> {
  /**
   * @generated from field: repeated messenjo.Contact contacts = 1;
   */
  contacts: Contact[] = [];

  constructor(data?: PartialMessage<GetContactsRes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "messenjo.GetContactsRes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contacts", kind: "message", T: Contact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetContactsRes {
    return new GetContactsRes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetContactsRes {
    return new GetContactsRes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetContactsRes {
    return new GetContactsRes().fromJsonString(jsonString, options);
  }

  static equals(a: GetContactsRes | PlainMessage<GetContactsRes> | undefined, b: GetContactsRes | PlainMessage<GetContactsRes> | undefined): boolean {
    return proto3.util.equals(GetContactsRes, a, b);
  }
}

/**
 * @generated from message messenjo.Contact
 */
export class Contact extends Message$1<Contact> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: bytes group_id = 2;
   */
  groupId = new Uint8Array(0);

  /**
   * @generated from field: bytes user_id = 3;
   */
  userId = new Uint8Array(0);

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: string pfp = 5;
   */
  pfp = "";

  /**
   * @generated from field: int32 member_count = 6;
   */
  memberCount = 0;

  /**
   * @generated from field: int32 unread_count = 7;
   */
  unreadCount = 0;

  /**
   * @generated from field: messenjo.Message lastMessage = 8;
   */
  lastMessage?: Message;

  constructor(data?: PartialMessage<Contact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "messenjo.Contact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "user_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "pfp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "member_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "unread_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "lastMessage", kind: "message", T: Message },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contact {
    return new Contact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contact {
    return new Contact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contact {
    return new Contact().fromJsonString(jsonString, options);
  }

  static equals(a: Contact | PlainMessage<Contact> | undefined, b: Contact | PlainMessage<Contact> | undefined): boolean {
    return proto3.util.equals(Contact, a, b);
  }
}

/**
 * @generated from message messenjo.GetMessagesReq
 */
export class GetMessagesReq extends Message$1<GetMessagesReq> {
  /**
   * @generated from field: bytes group_id = 1;
   */
  groupId = new Uint8Array(0);

  /**
   * @generated from field: int32 start = 2;
   */
  start = 0;

  /**
   * @generated from field: int32 end = 3;
   */
  end = 0;

  constructor(data?: PartialMessage<GetMessagesReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "messenjo.GetMessagesReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "start", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "end", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMessagesReq {
    return new GetMessagesReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMessagesReq {
    return new GetMessagesReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMessagesReq {
    return new GetMessagesReq().fromJsonString(jsonString, options);
  }

  static equals(a: GetMessagesReq | PlainMessage<GetMessagesReq> | undefined, b: GetMessagesReq | PlainMessage<GetMessagesReq> | undefined): boolean {
    return proto3.util.equals(GetMessagesReq, a, b);
  }
}

/**
 * @generated from message messenjo.GetMessagesRes
 */
export class GetMessagesRes extends Message$1<GetMessagesRes> {
  /**
   * @generated from field: repeated messenjo.Message messages = 1;
   */
  messages: Message[] = [];

  constructor(data?: PartialMessage<GetMessagesRes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "messenjo.GetMessagesRes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "messages", kind: "message", T: Message, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMessagesRes {
    return new GetMessagesRes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMessagesRes {
    return new GetMessagesRes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMessagesRes {
    return new GetMessagesRes().fromJsonString(jsonString, options);
  }

  static equals(a: GetMessagesRes | PlainMessage<GetMessagesRes> | undefined, b: GetMessagesRes | PlainMessage<GetMessagesRes> | undefined): boolean {
    return proto3.util.equals(GetMessagesRes, a, b);
  }
}

/**
 * @generated from message messenjo.Message
 */
export class Message extends Message$1<Message> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string from_username = 2;
   */
  fromUsername = "";

  /**
   * @generated from field: string from_pfp = 3;
   */
  fromPfp = "";

  /**
   * @generated from field: string content = 4;
   */
  content = "";

  /**
   * @generated from field: google.protobuf.Timestamp sent_at = 5;
   */
  sentAt?: Timestamp;

  constructor(data?: PartialMessage<Message>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "messenjo.Message";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "from_username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "from_pfp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "sent_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Message {
    return new Message().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJsonString(jsonString, options);
  }

  static equals(a: Message | PlainMessage<Message> | undefined, b: Message | PlainMessage<Message> | undefined): boolean {
    return proto3.util.equals(Message, a, b);
  }
}

/**
 * @generated from message messenjo.UpdateUserReq
 */
export class UpdateUserReq extends Message$1<UpdateUserReq> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string pfp = 2;
   */
  pfp = "";

  constructor(data?: PartialMessage<UpdateUserReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "messenjo.UpdateUserReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pfp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserReq {
    return new UpdateUserReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserReq {
    return new UpdateUserReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserReq {
    return new UpdateUserReq().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserReq | PlainMessage<UpdateUserReq> | undefined, b: UpdateUserReq | PlainMessage<UpdateUserReq> | undefined): boolean {
    return proto3.util.equals(UpdateUserReq, a, b);
  }
}

/**
 * @generated from message messenjo.CreateGroupReq
 */
export class CreateGroupReq extends Message$1<CreateGroupReq> {
  /**
   * @generated from field: string group_name = 1;
   */
  groupName = "";

  /**
   * @generated from field: string pfp = 2;
   */
  pfp = "";

  /**
   * @generated from field: repeated bytes user_ids = 3;
   */
  userIds: Uint8Array[] = [];

  constructor(data?: PartialMessage<CreateGroupReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "messenjo.CreateGroupReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pfp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_ids", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateGroupReq {
    return new CreateGroupReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateGroupReq {
    return new CreateGroupReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateGroupReq {
    return new CreateGroupReq().fromJsonString(jsonString, options);
  }

  static equals(a: CreateGroupReq | PlainMessage<CreateGroupReq> | undefined, b: CreateGroupReq | PlainMessage<CreateGroupReq> | undefined): boolean {
    return proto3.util.equals(CreateGroupReq, a, b);
  }
}

/**
 * @generated from message messenjo.CreateGroupRes
 */
export class CreateGroupRes extends Message$1<CreateGroupRes> {
  /**
   * @generated from field: bytes group_id = 1;
   */
  groupId = new Uint8Array(0);

  constructor(data?: PartialMessage<CreateGroupRes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "messenjo.CreateGroupRes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateGroupRes {
    return new CreateGroupRes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateGroupRes {
    return new CreateGroupRes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateGroupRes {
    return new CreateGroupRes().fromJsonString(jsonString, options);
  }

  static equals(a: CreateGroupRes | PlainMessage<CreateGroupRes> | undefined, b: CreateGroupRes | PlainMessage<CreateGroupRes> | undefined): boolean {
    return proto3.util.equals(CreateGroupRes, a, b);
  }
}

/**
 * @generated from message messenjo.UpdateGroupReq
 */
export class UpdateGroupReq extends Message$1<UpdateGroupReq> {
  /**
   * @generated from field: bytes group_id = 1;
   */
  groupId = new Uint8Array(0);

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string pfp = 3;
   */
  pfp = "";

  constructor(data?: PartialMessage<UpdateGroupReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "messenjo.UpdateGroupReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pfp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateGroupReq {
    return new UpdateGroupReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateGroupReq {
    return new UpdateGroupReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateGroupReq {
    return new UpdateGroupReq().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateGroupReq | PlainMessage<UpdateGroupReq> | undefined, b: UpdateGroupReq | PlainMessage<UpdateGroupReq> | undefined): boolean {
    return proto3.util.equals(UpdateGroupReq, a, b);
  }
}

/**
 * @generated from message messenjo.AddFriendReq
 */
export class AddFriendReq extends Message$1<AddFriendReq> {
  /**
   * @generated from field: bytes to_user_id = 1;
   */
  toUserId = new Uint8Array(0);

  constructor(data?: PartialMessage<AddFriendReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "messenjo.AddFriendReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "to_user_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddFriendReq {
    return new AddFriendReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddFriendReq {
    return new AddFriendReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddFriendReq {
    return new AddFriendReq().fromJsonString(jsonString, options);
  }

  static equals(a: AddFriendReq | PlainMessage<AddFriendReq> | undefined, b: AddFriendReq | PlainMessage<AddFriendReq> | undefined): boolean {
    return proto3.util.equals(AddFriendReq, a, b);
  }
}

/**
 * @generated from message messenjo.AddFriendRes
 */
export class AddFriendRes extends Message$1<AddFriendRes> {
  /**
   * @generated from field: bytes group_id = 1;
   */
  groupId = new Uint8Array(0);

  constructor(data?: PartialMessage<AddFriendRes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "messenjo.AddFriendRes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddFriendRes {
    return new AddFriendRes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddFriendRes {
    return new AddFriendRes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddFriendRes {
    return new AddFriendRes().fromJsonString(jsonString, options);
  }

  static equals(a: AddFriendRes | PlainMessage<AddFriendRes> | undefined, b: AddFriendRes | PlainMessage<AddFriendRes> | undefined): boolean {
    return proto3.util.equals(AddFriendRes, a, b);
  }
}

/**
 * @generated from message messenjo.UnfriendReq
 */
export class UnfriendReq extends Message$1<UnfriendReq> {
  /**
   * @generated from field: bytes to_user_id = 1;
   */
  toUserId = new Uint8Array(0);

  constructor(data?: PartialMessage<UnfriendReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "messenjo.UnfriendReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "to_user_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnfriendReq {
    return new UnfriendReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnfriendReq {
    return new UnfriendReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnfriendReq {
    return new UnfriendReq().fromJsonString(jsonString, options);
  }

  static equals(a: UnfriendReq | PlainMessage<UnfriendReq> | undefined, b: UnfriendReq | PlainMessage<UnfriendReq> | undefined): boolean {
    return proto3.util.equals(UnfriendReq, a, b);
  }
}

/**
 * @generated from message messenjo.LeaveGroupReq
 */
export class LeaveGroupReq extends Message$1<LeaveGroupReq> {
  /**
   * @generated from field: bytes group_id = 1;
   */
  groupId = new Uint8Array(0);

  constructor(data?: PartialMessage<LeaveGroupReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "messenjo.LeaveGroupReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeaveGroupReq {
    return new LeaveGroupReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeaveGroupReq {
    return new LeaveGroupReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeaveGroupReq {
    return new LeaveGroupReq().fromJsonString(jsonString, options);
  }

  static equals(a: LeaveGroupReq | PlainMessage<LeaveGroupReq> | undefined, b: LeaveGroupReq | PlainMessage<LeaveGroupReq> | undefined): boolean {
    return proto3.util.equals(LeaveGroupReq, a, b);
  }
}

/**
 * @generated from message messenjo.AddMembersReq
 */
export class AddMembersReq extends Message$1<AddMembersReq> {
  /**
   * @generated from field: bytes group_id = 1;
   */
  groupId = new Uint8Array(0);

  /**
   * @generated from field: repeated bytes user_ids = 2;
   */
  userIds: Uint8Array[] = [];

  constructor(data?: PartialMessage<AddMembersReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "messenjo.AddMembersReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "user_ids", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddMembersReq {
    return new AddMembersReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddMembersReq {
    return new AddMembersReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddMembersReq {
    return new AddMembersReq().fromJsonString(jsonString, options);
  }

  static equals(a: AddMembersReq | PlainMessage<AddMembersReq> | undefined, b: AddMembersReq | PlainMessage<AddMembersReq> | undefined): boolean {
    return proto3.util.equals(AddMembersReq, a, b);
  }
}

/**
 * @generated from message messenjo.AddMessageReq
 */
export class AddMessageReq extends Message$1<AddMessageReq> {
  /**
   * @generated from field: bytes group_id = 1;
   */
  groupId = new Uint8Array(0);

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  /**
   * @generated from field: google.protobuf.Timestamp sent_at = 3;
   */
  sentAt?: Timestamp;

  constructor(data?: PartialMessage<AddMessageReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "messenjo.AddMessageReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sent_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddMessageReq {
    return new AddMessageReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddMessageReq {
    return new AddMessageReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddMessageReq {
    return new AddMessageReq().fromJsonString(jsonString, options);
  }

  static equals(a: AddMessageReq | PlainMessage<AddMessageReq> | undefined, b: AddMessageReq | PlainMessage<AddMessageReq> | undefined): boolean {
    return proto3.util.equals(AddMessageReq, a, b);
  }
}

/**
 * @generated from message messenjo.AddMessageRes
 */
export class AddMessageRes extends Message$1<AddMessageRes> {
  /**
   * @generated from field: int32 message_id = 1;
   */
  messageId = 0;

  constructor(data?: PartialMessage<AddMessageRes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "messenjo.AddMessageRes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddMessageRes {
    return new AddMessageRes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddMessageRes {
    return new AddMessageRes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddMessageRes {
    return new AddMessageRes().fromJsonString(jsonString, options);
  }

  static equals(a: AddMessageRes | PlainMessage<AddMessageRes> | undefined, b: AddMessageRes | PlainMessage<AddMessageRes> | undefined): boolean {
    return proto3.util.equals(AddMessageRes, a, b);
  }
}

/**
 * @generated from message messenjo.ResetUnreadCountReq
 */
export class ResetUnreadCountReq extends Message$1<ResetUnreadCountReq> {
  /**
   * @generated from field: bytes group_id = 1;
   */
  groupId = new Uint8Array(0);

  constructor(data?: PartialMessage<ResetUnreadCountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "messenjo.ResetUnreadCountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetUnreadCountReq {
    return new ResetUnreadCountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetUnreadCountReq {
    return new ResetUnreadCountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetUnreadCountReq {
    return new ResetUnreadCountReq().fromJsonString(jsonString, options);
  }

  static equals(a: ResetUnreadCountReq | PlainMessage<ResetUnreadCountReq> | undefined, b: ResetUnreadCountReq | PlainMessage<ResetUnreadCountReq> | undefined): boolean {
    return proto3.util.equals(ResetUnreadCountReq, a, b);
  }
}

